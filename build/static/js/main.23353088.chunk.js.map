{"version":3,"sources":["components/Header.js","components/Poster.js","routes/PopularPage.js","routes/ComingSoonPage.js","serviceWorker.js","index.js","App.js"],"names":["styles","navigator","borderBottom","buttonMovies","marginRight","marginLeft","Header","this","props","classes","react_default","a","createElement","style","Button_default","color","Component","link","margin","display","position","image","width","height","Poster","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","src","href","alt","baseUrl","imgUrl","background","backgroundColor","marginTop","content","top","left","transform","library","flexWrap","justifyContent","getPopular","Promise","all","fetch","concat","then","res","json","_ref","movies","posters","i","length","posterPath","poster_path","push","Poster_Poster","title","createPosters","slicedToArray","catch","err","console","error","PopularPage","p","Header_Header","renderPosters","require","CommingSoonPage","Boolean","window","location","hostname","match","ReactDOM","render","BrowserRouter","Switch","Route","path","exact","component","ComingSoonPage","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.23353088.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport withStyles from \"@material-ui/core/styles\";\n\nconst styles = {\n  navigator: {\n    borderBottom: \"1px solid black\",\n  },\n\n  buttonMovies: {\n    marginRight: \"50px\",\n    marginLeft: \"50px\",\n  }\n};\n\nexport default class Header extends Component {\n  render() {\n    const { classes } = this.props;\n    return (\n      <nav style={styles.navigator}>\n        <div>\n          <Button color=\"primary\" style={styles.buttonMovies}>\n            Movies\n          </Button>\n          <Button color=\"primary\">\n            Suggestions\n          </Button>\n        </div>\n      </nav>\n    );\n  }\n}\n\n// export default withStyles(styles)(Header);\n","import React, { Component } from \"react\";\nimport withStyles from \"@material-ui/core/styles\";\n\nconst styles = {\n  link: {\n    margin: \"10px\",\n    display: \"inline-block\",\n    position: \"relative\"\n  },\n\n  image: {\n    width: \"200px\",\n    height: \"300px\",\n\n  }\n};\n\nexport default class Poster extends Component {\n  constructor(props) {\n    super(props);\n    this.src = props.src;\n  }\n\n  render() {\n    const { classes } = this.props;\n    return (\n      <a href=\"#\" style={styles.link}>\n        <img src={this.src} alt={this.alt} style={styles.image}></img>\n      </a>\n    );\n  }\n}\n\n\n// export default withStyles(styles)(Poster);\n","import React, { Component } from \"react\";\nimport withStyles from \"@material-ui/core/styles\";\nimport Header from \"../components/Header\";\nimport Poster from \"../components/Poster\";\n\nconst baseUrl = \"http://api.themoviedb.org/3/genre/movie/list?api_key=${process.env.API_KEY}\";\nconst imgUrl = \"https://image.tmdb.org/t/p/w500/\";\n\nconst styles = {\n  background: {\n    backgroundColor: \"#F0F0F0\",\n    width: \"100%\",\n    position: \"relative\",\n    marginTop: \"70px\"\n  },\n\n  content: {\n    position: \"relative\",\n    width: \"90%\",\n    top: \"0px\",\n    left: \"50%\",\n    transform: \"translateX(-50%)\",\n  },\n\n  library: {\n    display: \"flex\",\n    flexWrap: \"wrap\",\n    justifyContent: \"center\",\n  },\n};\n\n\n/**\n* fetch the popular movies on TMDb\n*/\nfunction fetchPopular() {\n  return fetch(`${baseUrl}`).then(res => res.json());\n}\n\n/**\n* get the popular movies\n* return an array with all movies\n*/\nfunction getPopular() {\n  return Promise.all([fetchPopular()])\n  .then(([movies]) => {\n    createPosters(movies)\n  })\n  .catch(err => {\n    console.error('Error ! cannot fetch data', err);\n  });\n}\n\n/**\n* create the Poster components\n* return an array with all Posters to display\n*/\nfunction createPosters(movies) {\n  let posters = [];\n  for (let i = 0; i < movies.length; ++i) {\n    let posterPath = imgUrl + movies[i].poster_path;\n    posters.push(<Poster src={posterPath} alt={movies[i].title} />)\n  }\n  return posters;\n}\n\nexport default class PopularPage extends Component {\n\n  renderPosters() {\n    let posters;\n    getPopular().then(p => {\n      posters = p;\n    });\n    return posters;\n  }\n\n  render() {\n    const { classes } = this.props;\n    return (\n      <div>\n        <Header/>\n        <div style={styles.background}>\n          <div style={styles.content}>\n            <div style={styles.library}>\n              {this.renderPosters()}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\n// export default withStyles(styles)(MoviesPage);\n","import React, { Component } from \"react\";\nimport withStyles from \"@material-ui/core/styles\";\nimport Header from \"../components/Header\";\nimport Poster from \"../components/Poster\";\nrequire('dotenv/config');\n\nconst baseUrl = \"https://api.themoviedb.org/3/movie/upcoming?page=1&api_key=${process.env.API_KEY}\";\nconst imgUrl = \"https://image.tmdb.org/t/p/w500/\";\n\nconst styles = {\n  background: {\n    backgroundColor: \"#F0F0F0\",\n    width: \"100%\",\n    position: \"relative\",\n    marginTop: \"70px\"\n  },\n\n  content: {\n    position: \"relative\",\n    width: \"90%\",\n    top: \"0px\",\n    left: \"50%\",\n    transform: \"translateX(-50%)\",\n  },\n\n  library: {\n    display: \"flex\",\n    flexWrap: \"wrap\",\n    justifyContent: \"center\",\n  },\n};\n\n/**\n  * fetch the comming soon movies on TMDb\n*/\nfunction fetchCommingSoon() {\n  return fetch(`${baseUrl}`).then(res => res.json());\n}\n\n/**\n* get the comming soon movies\n* return an array with all movies\n*/\nfunction getPopular() {\n  return Promise.all([fetchCommingSoon()])\n  .then(([movies]) => {\n    createPosters(movies);\n  })\n  .catch(err => {\n    console.error('Error ! cannot fetch data', err);\n  });\n}\n\n/**\n* create the Poster components\n* return an array with all Posters to display\n*/\nfunction createPosters(movies) {\n  let posters = [];\n  for (let i = 0; i < movies.length; ++i) {\n    let posterPath = imgUrl + movies[i].poster_path;\n    posters.push(<Poster src={posterPath} alt={movies[i].title} />)\n  }\n  return posters;\n}\n\nexport default class CommingSoonPage extends Component {\n  renderPosters() {\n    let posters;\n    getPopular().then(p => {\n      posters = p;\n    });\n    return posters;\n  }\n\n  render() {\n    const { classes } = this.props;\n    return (\n      <div>\n        <Header/>\n        <div style={styles.background}>\n          <div style={styles.content}>\n            <div style={styles.library}>\n              {this.renderPosters()}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\n// export default withStyles(styles)(MoviesPage);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, { Component } from 'react';\nimport { Switch, Route, Redirect } from \"react-router\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport './App.css';\nimport PopularPage from \"./routes/PopularPage\";\nimport ComingSoonPage from \"./routes/ComingSoonPage\";\n\nexport default () => (\n  <BrowserRouter>\n      <Switch>\n        <Route path=\"/\" exact component={PopularPage}/>\n        <Route path=\"/suggestions\" component={ComingSoonPage}/>\n      </Switch>\n  </BrowserRouter>\n);;\n"],"sourceRoot":""}